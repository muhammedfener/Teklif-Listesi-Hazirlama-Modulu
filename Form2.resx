<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAJAAAALQAAAF8AAACQAAAAtwAAANQAAADoAgIB9AUEAfsGBQL+BQQC/QMD
        AfgBAADuAgIB1VtJGVT/2koX8cxMBwIHCQIBAQEAAAAAIgAAAd4CAgX/AQEC9wAAAE0AAAAAAAAAAgAA
        AAEAAAAAAAAAAAAAAAAAAAAUAAAAYgAAALQIBwLkIRoJ+kAzEf9fTBr/emIh/49yJ/+dfiv/poQt/6mH
        Lv+nhi3/oYEs/5R3KP+McCb/1as67fXEQtO5lDKyEQ0EowAAAGQAAACRCQkZ+zMzlf8TEzf/AAAAtAAA
        AFsAAACYAAAASAAAAAAAAAAAAAAAOQEAAL8fGQj8Z1Ic/6qILv/Uqjn/6Lo///HBQf/0w0L/9MNC//TD
        Qv/0w0L/9MNC//TDQv/0w0L/9MNC//TDQv/zwkL/zKM3/zovEf8NDSj/Cgod/BMTN/41NZr/VVX2/z8/
        uf8ZGUr/CQka/A8PLP8DAwjhAAAASAAAAAAAAADSSTsU/8uiN//xwUH/9MNC//LBQf/wwEH/8MBB//DA
        Qf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//TDQv+TdSf/BwcQ/z4+tP9JSdX/R0fP/zY2
        oP8nJ3r/MDCS/0VFyP9ISNH/R0fQ/w8PLf8AAACXAAAAAQUEAf6nhS3/9sVD//DAQf/wwEH/8MBB//DA
        Qf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/9cRC/8afNf8VEQr/ODin/0dH
        0P8UFD7/Hx8h/0JCQP8rKyr/Dw8n/zs7rf9ISNH/CQkb/QAAAF0AAAAABgUC/6qILv/0w0L/8MBB//DA
        Qf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/Gnjb/ZFAY/xAP
        I/9ERMj/GRlM/0ZGQ//V1dX/+Pj4/+fn5/9ubmz/Dw8o/0REyP8aGkv/AAAAtAAAAEsGBQL/qogu//TD
        Qv/wwEH/8MBB//DAQf/wwEH/8cBB//HBQf/ywkL/88JC//PDQv/zw0L/88NC//PCQv/ywkL/7L1A/009
        FP8HCCD/MzOV/0FBv/8TEx7/v7+//////////////////+Xl5f8rKyv/MDCR/z8/uf8TEzb/AAAB9gYF
        Av+qiC7/9MNC//HBQf/0w0L/88NC/++/Qf/muD7/2q47/86kN//DnDT/vZcy/7mUMv+7lTL/wJkz/9Cm
        OP/ouT3/RDYP/x8gZv9SUvD/Ozuw/x0dIf/b29v//////////////////Pz7/2Vlaf8wMJH/VFT2/zMz
        lv8BAQT/BgUC/6yKL//1xEL/2q87/66LLv98YyD/U0EU/zcrDv8nIAz/IBsN/x4aEP8eGxL/HxwU/x4b
        E/8cGRD/OjIe/9O2bP9iVzn/CQkS/yUlbf9DQ8b/EBAg/6mpqP/////////////////4+PX/ra3l/1JS
        7P8zM5b/CAgX+gAAAN4HBQL/hmsk/3JbHf8qIQv/HRsV/zc1Mf9cWlP/f3tx/5uWiP+vqJn/u7Sk/8K7
        qv/Fvqz/xL2r/763pv/Cu6n/6uHM/+DXwv+Nh3n/EBAd/0FBwP8jI2r/KCgm/6mpqP/f397/9vb2/319
        gP9AQJf/Tk7l/xMTN/8AAACRAAAAHwEBAP8ODAX/NDMv/4iDd//Gvqz/5NzH//Dn0P/z6tP/8+rU//Pq
        0//y6dP/8unS//Lp0v/y6dL/8unT//Lp0v/v5tD/8+rU/722pf8TEhX/OTmq/09P5/8jI2r/Dw8e/yAg
        JP9vb6j/WVnM/0dH1v9JSdT/Cgod/gAAAGYAAAAAAAAA/19bU//d1cH/8+rT//Lo0v/w59H/7+bQ/+/m
        0P/v5tD/7+bQ/+/m0P/v5tD/7+bQ/+/m0P/v5tD/7+bQ/+/m0P/z6dP/ko1//wcHEP82Np7/OTmq/0FB
        wP9DQ8b/Ozux/0hI2v9ISNX/OTmm/z4+tP8ODij/AAAAlwAAAAEGBQX/qaOT//Tr1P/v5tD/7+bQ/+/m
        0P/v5tD/7+bQ/+/m0P/v5tD/7+bQ/+/m0P/v5tD/7+bQ/+/m0P/v5tD/7+bQ//Dn0f/e1sH/W1hP/wYG
        D/8TEhX/Dw8c/yUlbf9SUvD/MzOU/wsLIPoCAgXqBQUQ/QEBAsQAAAApAAAAAAYGBf+po5P/8+rT/+/m
        0P/v5tD/7+bQ/+/m0P/v5tD/7+bQ/+/m0P/v5tD/7+bQ/+/m0P/v5tD/7+bQ/+/m0P/v5tD/7+bQ//Ho
        0v/e1sH/ko1//722pP+NiHr/DQwV/yMjZv8MDCT/AAAAkwAAACwAAABjAAAAKAAAAAAAAAAABgYF/6mj
        k//z6tP/7+bQ/+/m0P/v5tD/8OfR//Ho0v/y6dL/8+nT//Pq0//z6tT/8+rU//Pq1P/z6tT/8+rT//Lp
        0//x6NL/8OfR//Dn0f/z6dP/8+rU/9/Xwv9cWFD/DAsK/wAAAMkAAAAuAAAAAAAAAAAAAAAAAAAAAAAA
        AAAGBgX/qaOT//Pq1P/y6dL/8+rT/+/m0P/k28b/1Mu4/8K7qf+yq5z/pZ+R/5yXif+Zk4b/mpWI/6Gb
        jf+sppf/u7Sk/83Fs//e1cH/6+LN//Lp0//y6dP/8ejS/97Vwf8uLCj/AAAAZgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAYGBf+spZX/7uXP/8S9q/+MiHz/WVZP/zU0MP8jIRz/HhsS/yAbDv8kHQz/JyAM/ykh
        DP8oIQz/JR4M/yEbDf8eGhD/IB4Y/ywrJ/9JR0L/d3Nq/7Cpmv/g18P/49rF/y8uKf8AAABjAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABgYF/3FsYv9QTkj/HRoU/ysiC/9VQxX/gWch/6OCK/+8ljL/y6M3/9Wq
        Ov/arjv/3LA8/9uvO//XrDr/0KY4/8KbNP+uiy7/j3Il/2ZRGf85LQ7/HBgN/zMxLf99eW7/JiQh/wAA
        AGMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/DAoG/1A/FP+qhy3/3LA8/++/Qf/0w0L/9MNC//PD
        Qv/ywkL/8sFB//HBQf/xwUH/8cFB//LBQf/ywkL/88JC//TDQv/0w0L/8sFC/+a4Pv/CmzT/dF0e/x4Y
        Cf8CAgL/AAAAYwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP91XR//67xA//TDQv/xwUH/8MBB//DA
        Qf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8cBB//PC
        Qv/zwkL/tZAx/xcSBv8AAABjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgUC/6uJLv/0xEL/8MBB//DA
        Qf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DA
        Qf/wwEH/8MBB//HBQf/jtT3/LyYN/wAAAGMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBQL/qogu//TD
        Qv/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DAQf/wwEH/8MBB//DA
        Qf/wwEH/8MBB//DAQf/wwEH/8cFB/+G0Pf8vJg3/AAAAYwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYF
        Av+qiC7/9MNC//DAQf/wwEH/8cBB//LBQv/zw0L/9MNC//TDQv/0w0L/9MNC//PDQv/zw0L/9MNC//TD
        Qv/0w0L/9MNC//LCQv/xwUH/8MBB//DAQf/xwUH/4bQ9/y8mDf8AAABjAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABgUC/6qILv/1xEL/9MNC//LBQf/nuT//06k5/7uWMv+lgyv/kXMl/4JoIf95YB//dV0d/3df
        Hv9+ZCD/i24k/5x9Kf+yjjD/yqI2/+CzPf/vv0H/9MNC//PCQv/htD3/LyYN/wAAAGMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAGBQL/rIkv/+K1Pf+ohi3/aVQa/zouDv8jHQz/HRoS/yMhHP8tLCf/NzUx/z08
        N/9APjr/Pz05/zo4NP8xLyv/JyUh/x8cFv8fGg3/LyUM/1VDFf+QciX/zqU3/+CzPf8wJg3/AAAAYwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYFAv9ZRxf/NSoN/x0bFf9DQTz/d3Nq/6Odj//Buqj/1My4/9/W
        wv/l3Mf/6N/K/+nhy//p4Mv/597J/+LZxP/Z0b3/ycKv/7Cqmv+JhXn/V1VO/ygmIv8hGwv/XksY/yAZ
        Cf8AAABjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/xMSEf9wbGP/xb6s/+ngy//y6dP/8+rT//Lp
        0v/x6NH/8OfR//Dn0f/v5tD/7+bQ/+/m0P/w59D/8OfR//Dn0f/y6dL/8+rU//Pq1P/o4Mr/1My5/5aR
        hP8uLSr/AAAA/wAAAGMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+hH9z//Pq1P/y6dL/7+bQ/+/m
        0P/v5tD/7+bQ/+/m0P/v5tD/7+bQ/+/m0P/y6dP/8+rT//Pp0//y6dP/8OfR/+vizP/p4Mv/7uXP/3l0
        af+gmov/+O/Y/8a+rP8aGRf/AAAAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANJLSEH/ysOw//Dn
        0f/z6tP/8ejS/+/m0P/v5tD/7+bQ/+/m0P/v5tD/6uHM/56Yiv9+eW7/eXRp/25qX/9dWVH/REI8/1tY
        T//i2sX/vLWk/87Gs//i2sX/gn1x/wsLCu0AAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOgEB
        AL8fHhv8Z2Na/6qjlP/Ty7j/6N/K//Dn0f/y6dP/8+rU//Tr1P/p4cv/Z2Na/zo4M/9BPzn/SkdA/1hV
        Tf9saF7/mJKE/9fPu//AuKf/hH9z/zg2MP8GBgXjAAAAaAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAFAAAAGMAAAC0CAgH5CEfHPlAPTf/X1xT/3l1av+OiXz/nZeI/6WfkP+jnY7/npiJ/5mU
        hf+Qi37/gn1x/2xoXv9PTEX/LCsm/RAPDu8BAQHKAAAAhAAAAC0AAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAAuAAAAXwAAAJAAAAC3AAAA1AAAAOgCAgL1BQUE+wYG
        Bf4GBgX9BAQD+AEBAe0AAADdAAAAwwAAAKAAAAByAAAAQAAAABQAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA4AAEE4AAAAMAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAAAAAAAAQAAAAMAAAAfAAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAA
        AD8AAAA/AAAAPwAAAD8AAAA/gAAAf+AAAf8=
</value>
  </data>
</root>